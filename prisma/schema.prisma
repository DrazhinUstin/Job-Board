generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  jobs          Job[]
  company       Company?
}

model Company {
  id          String   @id @default(cuid())
  userId      String   @unique
  name        String
  logoUrl     String?
  location    String?
  description String?
  websiteUrl  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique
  jobs Job[]
}

model Job {
  id             String   @id @default(cuid())
  userId         String
  categoryName   String
  title          String
  type           String
  location       String?
  description    String?
  salary         Int
  companyName    String
  companyLogoUrl String?
  contactEmail   String?
  contactUrl     String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category       Category @relation(fields: [categoryName], references: [name])
}
